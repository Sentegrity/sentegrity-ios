//
//  iOD.h
//  ObjectiveDefense
//
//  Copyright Â© 2017 Shmoopi LLC. All rights reserved.
//

/*!
 *  @header iOD.h
 *
 *  @brief ObjDef iOS Security Class
 *
 *  This file contains the methods declared in the security library and provides a secure and easy way to validate the security of your application
 *
 *  @author ObjectiveDefense
 *  @copyright 2017 ObjectiveDefense
 *  @version 4.0.1
 */

#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>

@interface iOD : NSObject

/*!
 *  @brief Jailbreak Check
 *
 *  @brief Determines if the device the application is running on is jailbroken
 *
 *  @discussion The Jailbreak Check uses the most up-to-date jailbreak checks available.  Searching the device for any signs of a jailbreak, this check should not raise any false positives about the jailbroken status of a device.
 *
 *  @discussion The Jailbreak Check is designed to avoid manipulation by dynamically invoking the provided class and provided jailbreak class method with the provided argument.  It does this by utilizing the dynamic capabilities of the Objective-C runtime - parsing the output of the library's jailbreak checks and utilizing that output to generate and call the provided class and notJailbroken class method by name, generated by the output.
 *  
 *  @param isJailbroken This block gets run ONLY if the Jailbreak Check determines the device is jailbroken.  You should pass a block that contains the code that will run if the library determines the device is jailbroken.
 *  
 *  @warning Be careful not to include easily identifiable strings or method names in the 'Is Jailbroken' block
 *  
 *  @return This function will not return a value and will only let you know if the application is running on a jailbroken device.  To get notified that the application is NOT running on a jailbroken device, put your 'NOT jailbroken' code in the provided NOT jailbroken class and NOT jailbroken class method.  This method will be called only when the library determines the device is NOT jailbroken.
 */
__attribute__((always_inline)) void rovtaz(void (^vangi)(id response/* Is Jailbroken */));

/*! 
 *  @brief Piracy Check
 *
 *  @brief Checks to see if the application is pirated
 *  
 *  @discussion The Piracy Check utilizes several checks to determine if an application has been pirated.  Included methods: Encryption checks, runtime code integrity validation, dynamic memory validation, binary manipulation and integrity checks, content revision checks, and hashing and bundle verification checks.
 *  
 *  @discussion The Piracy Check is designed to avoid manipulation by dynamically invoking the provided class and provided piracy class method with the provided argument.  It does this by utilizing the dynamic capabilities of the Objective-C runtime - parsing the output of the library's piracy checks and utilizing that output to generate and call the provided class and notPirated class method by name, generated by the output.
 *
 *  @param isPirated This block gets run ONLY if the Piracy Check determines the application is pirated.  You should pass a block that contains the code that will run if the library determines the application is pirated.
 *  
 *  @warning Be careful not to include easily identifiable strings or method names in the 'Is Pirated' block
 *  
 *  @return To get notified that the application is NOT pirated, place your code into the provided class and notPirated class method.  This method will be called only when the library determines the application is NOT pirated.
 */
__attribute__((always_inline)) void gusar(void (^merirosvo)(id response/* Is Pirated */));

/*! 
 *  @brief Tampering Check
 *
 *  @brief Checks to see if the application has been tampered with
 *  
 *  @discussion The Tampering Check looks for attached dynamic libraries, changes to the application during runtime, method swizzling from external images, and modifications to application resources.
 *  
 *  @discussion The Tampering Check is designed to avoid manipulation by dynamically invoking the provided class and provided tampering class method with the provided argument.  It does this by utilizing the dynamic capabilities of the Objective-C runtime - parsing the output of the library's tampering checks and utilizing that output to generate and call the provided class and notTamperedWith class method by name, generated by the output.
 *  
 *  @param isTamperedWith This block gets run ONLY if the Tamper Check determines the application is tampered with.  You should pass a block that contains the code that will run if the library determines the application is tampered with.
 *  
 *  @warning Be careful not to include easily identifiable strings or method names in the 'Is Tampered With' block
 *  
 *  @return To get notified that the application is NOT pirated, place your code into the provided class and notTamperedWith class method.  This method will be called only when the library determines the application is NOT tampered with.
 */
__attribute__((always_inline)) void nagovarati(void (^alsifye)(id response/* Is Tampered With */));

/*! 
 *  @brief Anti-Debug
 *
 *  @brief Denies all attached debuggers and prevents them from attaching - including Cycript
 *
 *  @discussion The Anti-Debug function will kill all attached debuggers and prevent them from attaching throughout the lifecycle of the application
 */
__attribute__((always_inline)) void ispravljanje();

/*!
 *  @brief Quit Application
 *
 *  @brief Quits the application covertly to avoid detection
 *
 *  @discussion The Quit Application function serves as a method to quickly and covertly quit the application without warning.  It does so without utilizing exit(0), close(0), or other obvious exit methods.
 *
 *  @warning May cause an exception to be thrown
 */
__attribute__((always_inline)) void otkaz();

@end
