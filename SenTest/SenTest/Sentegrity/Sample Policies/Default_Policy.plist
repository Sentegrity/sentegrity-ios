<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>policyID</key>
	<integer>2</integer>
	<key>revision</key>
	<integer>1</integer>
	<key>runtime</key>
	<integer>5</integer>
	<key>userThreshold</key>
	<integer>60</integer>
	<key>systemThreshold</key>
	<integer>65</integer>
	<key>DNEModifiers</key>
	<dict>
		<key>unauthorized</key>
		<integer>1</integer>
		<key>unsupported</key>
		<real>0.7</real>
		<key>disabled</key>
		<integer>1</integer>
		<key>expired</key>
		<real>0.5</real>
		<key>error</key>
		<real>0.5</real>
	</dict>
	<key>classifications</key>
	<array>
		<dict>
			<key>id</key>
			<integer>1</integer>
			<key>name</key>
			<string>BREACH_INDICATOR</string>
			<key>weight</key>
			<integer>0</integer>
			<key>protectMode</key>
			<integer>1</integer>
			<key>protectViolationName</key>
			<string>Breach</string>
			<key>protectInfo</key>
			<string>A system breach has been detected, please contact Sentegrity for assistance.</string>
			<key>contactPhone</key>
			<string>18005556666</string>
			<key>contactURL</key>
			<string>www.sentegrity.com/help</string>
			<key>contactEmail</key>
			<string>help@sentegrity.com</string>
		</dict>
		<dict>
			<key>id</key>
			<integer>2</integer>
			<key>name</key>
			<string>POLICY_VIOLATION</string>
			<key>weight</key>
			<integer>0</integer>
			<key>protectMode</key>
			<integer>0</integer>
			<key>protectViolationName</key>
			<string>Policy</string>
			<key>protectInfo</key>
			<string>A violation of application policy has been detected.  Please contact the application administrator.</string>
			<key>contactPhone</key>
			<string>18005556666</string>
			<key>contactURL</key>
			<string>www.application.com</string>
			<key>contactEmail</key>
			<string>help@application.com</string>
		</dict>
		<dict>
			<key>id</key>
			<integer>3</integer>
			<key>name</key>
			<string>SYSTEM_SECURITY</string>
			<key>weight</key>
			<integer>0</integer>
			<key>protectMode</key>
			<integer>2</integer>
			<key>protectViolationName</key>
			<string>Anomaly</string>
			<key>protectInfo</key>
			<string>A system anomaly has been detected, please contact Sentegrity for assistance. </string>
			<key>contactPhone</key>
			<string>18005556666</string>
			<key>contactURL</key>
			<string>www.sentegrity.com/help</string>
			<key>contactEmail</key>
			<string>help@sentegrity.com</string>
		</dict>
		<dict>
			<key>id</key>
			<integer>4</integer>
			<key>name</key>
			<string>USER_ANOMALY</string>
			<key>weight</key>
			<integer>1</integer>
			<key>protectMode</key>
			<integer>3</integer>
			<key>protectViolationName</key>
			<string>Anomaly</string>
			<key>protectInfo</key>
			<string>Are you the owner of this device?  Please authenticate to confirm.</string>
			<key>contactPhone</key>
			<string>18005556666</string>
			<key>contactURL</key>
			<string>www.application.com</string>
			<key>contactEmail</key>
			<string>help@application.com</string>
		</dict>
	</array>
	<key>subclassification</key>
	<array>
		<dict>
			<key>id</key>
			<integer>1</integer>
			<key>classID</key>
			<integer>1</integer>
			<key>name</key>
			<string>ThreatSpecific</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>2</integer>
			<key>classID</key>
			<integer>1</integer>
			<key>name</key>
			<string>Tamper</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>3</integer>
			<key>classID</key>
			<integer>1</integer>
			<key>name</key>
			<string>Sandbox</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>1</integer>
			<key>classID</key>
			<integer>2</integer>
			<key>name</key>
			<string>File</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>2</integer>
			<key>classID</key>
			<integer>2</integer>
			<key>name</key>
			<string>Process</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>3</integer>
			<key>classID</key>
			<integer>2</integer>
			<key>name</key>
			<string>Network</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>4</integer>
			<key>classID</key>
			<integer>2</integer>
			<key>name</key>
			<string>Wifi</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>5</integer>
			<key>classID</key>
			<integer>2</integer>
			<key>name</key>
			<string>InstalledApps</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>6</integer>
			<key>classID</key>
			<integer>2</integer>
			<key>name</key>
			<string>Versioning</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>7</integer>
			<key>classID</key>
			<integer>2</integer>
			<key>name</key>
			<string>ProtectMode</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>1</integer>
			<key>classID</key>
			<integer>3</integer>
			<key>name</key>
			<string>Time</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>2</integer>
			<key>classID</key>
			<integer>3</integer>
			<key>name</key>
			<string>Location</string>
			<key>dneMessage</key>
			<string>Sentegrity was unable to verify policy, allowing location services may prevent this situation from reoccuring. [View Privacy Information]</string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>3</integer>
			<key>classID</key>
			<integer>3</integer>
			<key>name</key>
			<string>Wifi</string>
			<key>dneMessage</key>
			<string>Sentegrity was unable to verify policy, connecting to Wifi may prevent this from reoccuring.  [View Privacy Information]</string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>4</integer>
			<key>classID</key>
			<integer>3</integer>
			<key>name</key>
			<string>Platform</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>1</integer>
			<key>classID</key>
			<integer>4</integer>
			<key>name</key>
			<string>Position</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>0</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>2</integer>
			<key>classID</key>
			<integer>4</integer>
			<key>name</key>
			<string>Location</string>
			<key>dneMessage</key>
			<string>Sentegrity was unable to authenticate you, allowing location services may prevent this situation from reoccuring. [View Privacy Information]</string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>3</integer>
			<key>classID</key>
			<integer>4</integer>
			<key>name</key>
			<string>Time</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>4</integer>
			<key>classID</key>
			<integer>4</integer>
			<key>name</key>
			<string>KnownDevices</string>
			<key>dneMessage</key>
			<string>Sentegrity was unable to authenticate you, allowing bluetooth access and connecting to Wifi may prevent this from reoccuring.  [View Privacy Information]</string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>5</integer>
			<key>classID</key>
			<integer>4</integer>
			<key>name</key>
			<string>Power</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>6</integer>
			<key>classID</key>
			<integer>4</integer>
			<key>name</key>
			<string>Activity</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>id</key>
			<integer>7</integer>
			<key>classID</key>
			<integer>4</integer>
			<key>name</key>
			<string>ProtectMode</string>
			<key>dneMessage</key>
			<string></string>
			<key>weight</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>trustFactors</key>
	<array>
		<dict>
			<key>id</key>
			<integer>1001</integer>
			<key>desc</key>
			<string>PURPOSE: Identify known bad files, HOW: Scan for payload file names, if found use first found filename else 0 (baseline) to generate single canidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0</string>
			<key>classID</key>
			<integer>1</integer>
			<key>subClassID</key>
			<integer>1</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>badFiles</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>managed</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>File</string>
			<key>implementation</key>
			<string>badFiles:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>/bin/bash</string>
				<string>/bin/sh</string>
				<string>/Library/MobileSubstrate/MobileSubstrate.dylib</string>
				<string>/var/log/syslog</string>
				<string>/etc/clutch.conf</string>
				<string>/var/root/Documents/Cracked/</string>
				<string>/private/var/lib/cydia/</string>
				<string>/private/var/lib/apt</string>
				<string>/private/var/lib/stash</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1002</integer>
			<key>desc</key>
			<string>PURPOSE: Identify known bad process names, HOW: Scan for payload process names if found use first found process name else 0 (baseline) to generate single candidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0</string>
			<key>classID</key>
			<integer>1</integer>
			<key>subClassID</key>
			<integer>1</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>badProcesses</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Process</string>
			<key>implementation</key>
			<string>badProcesses:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>sbsettingsd</string>
				<string>python*</string>
				<string>absinthed*</string>
				<string>Snoop-it*</string>
				<string>MobileCydia</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1003</integer>
			<key>desc</key>
			<string>PURPOSE: Identify active network destinations using known bad IPs, HOW: Scan for network destinations in payload if found use first found network destination else 0 (baseline) to generate single candidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0</string>
			<key>classID</key>
			<integer>1</integer>
			<key>subClassID</key>
			<integer>1</integer>
			<key>priority</key>
			<integer>3</integer>
			<key>name</key>
			<string>badNetDst</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Netstat</string>
			<key>implementation</key>
			<string>badNetDst:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>appaddict.org</string>
				<string>hackndev.org</string>
				<string>thebigboss.org</string>
				<string>howett.net</string>
				<string>nesolabs.de</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1004</integer>
			<key>desc</key>
			<string>PURPOSE: Identify known bad service/port in use, HOW: Scan for listening ports in payload if found use found port number else 0 (baseline) to generate single candidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0</string>
			<key>classID</key>
			<integer>1</integer>
			<key>subClassID</key>
			<integer>3</integer>
			<key>priority</key>
			<integer>2</integer>
			<key>name</key>
			<string>priviledgedNetServices</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Netstat</string>
			<key>implementation</key>
			<string>priviledgedNetServices:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>22</string>
				<string>80</string>
				<string>443</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1005</integer>
			<key>desc</key>
			<string>PURPOSE: identify bad uri handlers of known malicious apps, HOW: Attempt to access bad URIs from payload if found use found URI name else 0 (baseline) to generate single candidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0</string>
			<key>classID</key>
			<integer>1</integer>
			<key>subClassID</key>
			<integer>1</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>badURIHandler</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Http</string>
			<key>implementation</key>
			<string>badURIHandlers:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>cydia</string>
				<string>snoop</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1006</integer>
			<key>desc</key>
			<string>PURPOSE: Identify integrity of the sandbox via API calls, HOW: Perform platform-specific tests, use result from a single or multiple API call functions to generate a single or multiple candidate assertions for TrustFactor, BASELINE: Created using assertion generated from known-good (expected) result of API calls</string>
			<key>classID</key>
			<integer>1</integer>
			<key>subClassID</key>
			<integer>3</integer>
			<key>priority</key>
			<integer>2</integer>
			<key>name</key>
			<string>sandboxVerification</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Sandbox</string>
			<key>implementation</key>
			<string>sandboxVerification:</string>
			<key>baseline</key>
			<string>0</string>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1007</integer>
			<key>desc</key>
			<string>PURPOSE: Detect a tamper of a subscriber&apos;s app based on binary data hash performed by subscriber SDK, HOW: Extract hash from subscriber IPC request and generate a single assertion from it for the TrustFactor, BASELINE: Learned using first subscriber hash to generate assertion</string>
			<key>classID</key>
			<integer>1</integer>
			<key>subClassID</key>
			<integer>2</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>subscribeTamper</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>1</integer>
			<key>history</key>
			<integer>1</integer>
			<key>dispatch</key>
			<string>Subscriber</string>
			<key>implementation</key>
			<string>subscribeTamper:</string>
			<key>baseline</key>
			<real>0</real>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1008</integer>
			<key>desc</key>
			<string>PURPOSE: Detect tamper of sentegrity binary or core detection policy, HOW: This rule is forcibly triggered as a result of embedded detection or policy or runtime checksum violations and triggered using a random number else 0 to generate a single assertion for the TrustFactor that is guaranteed to be unique, BASELINE: created using assertion generated from 0</string>
			<key>classID</key>
			<integer>1</integer>
			<key>subClassID</key>
			<integer>2</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>sentegrityTamper</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>1</integer>
			<key>dispatch</key>
			<string>Sentegrity</string>
			<key>implementation</key>
			<string>selfTamper:</string>
			<key>baseline</key>
			<real>0</real>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1009</integer>
			<key>desc</key>
			<string>PURPOSE: Policy that only allows access from specific locations, HOW: The current location (long/lat) is rounded and concatenated to generate a single candidate assertion for the TrustFactor, BASELINE: Created from pre-established payload values set by policy owner</string>
			<key>classID</key>
			<integer>2</integer>
			<key>subClassID</key>
			<integer>2</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>locationAllowed</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>1</integer>
			<key>history</key>
			<integer>5</integer>
			<key>dispatch</key>
			<string>Location</string>
			<key>implementation</key>
			<string>locationAllowed:</string>
			<key>baseline</key>
			<string>payload</string>
			<key>payload</key>
			<array>
				<string>41, -88</string>
				<string>41, -87</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1010</integer>
			<key>desc</key>
			<string>PURPOSE: Policy that only allows access during specific times, HOW: The current time is compared to allowed payload times spans, if not in the time span (violation) use current time else 0 (baseline) to generate a single candidate assertion for the TrustFactor, BASELINE: Created from 0</string>
			<key>classID</key>
			<integer>2</integer>
			<key>subClassID</key>
			<integer>1</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>timeAllowed</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>managed</key>
			<integer>0</integer>
			<key>local</key>
			<integer>1</integer>
			<key>history</key>
			<integer>5</integer>
			<key>dispatch</key>
			<string>Time</string>
			<key>implementation</key>
			<string>timeAllowed:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>8-17</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1011</integer>
			<key>desc</key>
			<string>PURPOSE: Policy that does not allow vulnerable platforms, HOW: The current platform version is compared to payload known-good versions, if match not found use current version, else 0 (baseline) to generate a single candidate assertion for the TrustFactor  , BASELINE: Created from 0</string>
			<key>classID</key>
			<integer>2</integer>
			<key>subClassID</key>
			<integer>4</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>platformAllowed</string>
			<key>penalty</key>
			<integer>100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>1</integer>
			<key>history</key>
			<integer>5</integer>
			<key>dispatch</key>
			<string>Platform</string>
			<key>implementation</key>
			<string>platformVersionAllowed:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>8.1.2</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1012</integer>
			<key>desc</key>
			<string>PURPOSE: Identify change in critical file sizes, HOW: Iterate through payload files and determine sizes for each, summarize all to generate candidate assertion for the TrustFactor, BASELINE: Learned from first candidate assertion</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>1</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>fileSizeChange</string>
			<key>penalty</key>
			<integer>30</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>File</string>
			<key>implementation</key>
			<string>fileSizeChange:</string>
			<key>baseline</key>
			<dict>
				<key>learned</key>
				<string></string>
				<key>iterates</key>
				<integer>1</integer>
			</dict>
			<key>payload</key>
			<array>
				<string>/etc/passwd</string>
				<string>/bin/usr</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1013</integer>
			<key>desc</key>
			<string>PURPOSE: Identify new root (uid=0) processes, HOW: Iterate through all current root processes and generate candidate assertion for each root process name resulting in multiple candidate assertions for the TrustFactor, BASELINE: Multiple created from each root process name discovered</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>2</integer>
			<key>priority</key>
			<integer>2</integer>
			<key>name</key>
			<string>newRootProcess</string>
			<key>penalty</key>
			<integer>70</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>2</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>10</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>30</integer>
			<key>dispatch</key>
			<string>Process</string>
			<key>implementation</key>
			<string>newRootProcess:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1014</integer>
			<key>desc</key>
			<string>PURPOSE: Identify new privileged network services, HOW: Iterate through all low port (0-1023) source port network connection, generate assertion for each port resulting in multiple candidate assertions for the TrustFactor, BASELINE: Multiple created from each low port</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>3</integer>
			<key>priority</key>
			<integer>2</integer>
			<key>name</key>
			<string>newNetService</string>
			<key>penalty</key>
			<integer>80</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>2</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>10</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>10</integer>
			<key>dispatch</key>
			<string>Netstat</string>
			<key>implementation</key>
			<string>newNetServices:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1015</integer>
			<key>desc</key>
			<string>PURPOSE: Identify if no interface is up (no route), HOW: Check if loopback adapter is the default gw if yes use interface  name, else 0 (baseline),to generate candidate assertion for TrustFactor, BASELINE: Created from 0</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>3</integer>
			<key>priority</key>
			<integer>3</integer>
			<key>name</key>
			<string>noRoute</string>
			<key>penalty</key>
			<integer>30</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Route</string>
			<key>implementation</key>
			<string>noRoute:</string>
			<key>baseline</key>
			<real>0</real>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1016</integer>
			<key>desc</key>
			<string>PURPOSE: Identify if VPN interface is up, HOW: Check if VPN interface adapter is the default gw, if yes use interface  name, else 0 (baseline),to generate candidate assertion for TrustFactor, BASELINE: Created from 0</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>3</integer>
			<key>priority</key>
			<integer>3</integer>
			<key>name</key>
			<string>vpnUp</string>
			<key>penalty</key>
			<integer>30</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Route</string>
			<key>implementation</key>
			<string>vpnUp:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1017</integer>
			<key>desc</key>
			<string>PURPOSE: Identify if connected AP is a SOHO, HOW: If current AP MAC (BSSID) matches any payload OUIs use current OUI, else 0 (baseline),to generate candidate assertion for TrustFactor, BASELINE: Created from 0</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>4</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>apSOHO</string>
			<key>penalty</key>
			<integer>30</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>5</integer>
			<key>dispatch</key>
			<string>Wifi</string>
			<key>implementation</key>
			<string>apSoho:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>00:0C:41</string>
				<string>00:0F:66</string>
				<string>00:12:17</string>
				<string>00:13:10</string>
				<string>00:14:BF</string>
				<string>00:16:B6</string>
				<string>00:18:39</string>
				<string>00:18:F8</string>
				<string>00:1A:70</string>
				<string>00:1C:10</string>
				<string>00:1D:7E</string>
				<string>00:1E:E5</string>
				<string>00:21:29</string>
				<string>00:22:6B&quot;</string>
				<string>00:23:69</string>
				<string>00:25:9C</string>
				<string>20:AA:4B</string>
				<string>48:F8:B3</string>
				<string>58:6D:8F</string>
				<string>68:7F:74</string>
				<string>98:FC:11</string>
				<string>C0:C1:C0</string>
				<string>C8:B3:73</string>
				<string>00:09:5B</string>
				<string>00:0F:B5</string>
				<string>00:14:6C</string>
				<string>00:18:4D</string>
				<string>00:1B:2F</string>
				<string>00:1E:2A</string>
				<string>00:1F:33</string>
				<string>00:22:3F</string>
				<string>00:24:B2</string>
				<string>00:26:F2</string>
				<string>00:8E:F2</string>
				<string>04:A1:51</string>
				<string>08:BD:43</string>
				<string>10:0D:7F</string>
				<string>20:0C:C8</string>
				<string>20:4E:7F</string>
				<string>20:E5:2A</string>
				<string>28:C6:8E</string>
				<string>2C:B0:5D</string>
				<string>30:46:9A</string>
				<string>44:94:FC</string>
				<string>4C:60:DE</string>
				<string>50:4A:6E</string>
				<string>6C:B0:CE</string>
				<string>74:44:01</string>
				<string>80:37:73</string>
				<string>84:1B:5E</string>
				<string>9C:D3:6D</string>
				<string>A0:21:B7</string>
				<string>A0:63:91</string>
				<string>A4:2B:8C</string>
				<string>C0:3F:0E</string>
				<string>C0:FF:D4</string>
				<string>C4:04:15</string>
				<string>C4:3D:C7</string>
				<string>E0:46:9A</string>
				<string>E0:91:F5</string>
				<string>E4:F4:C6</string>
				<string>E8:FC:AF</string>
				<string>F8:73:94</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1018</integer>
			<key>desc</key>
			<string>PURPOSE: Identify if connected AP is known, HOW: Use current AP MAC (BSSID) to generate candidate assertion for TrustFactor, BASELINE: Created from learned AP MAC (BSSIDs)</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>4</integer>
			<key>priority</key>
			<integer>2</integer>
			<key>name</key>
			<string>apKnown</string>
			<key>penalty</key>
			<integer>30</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>2</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>10</integer>
			<key>local</key>
			<integer>1</integer>
			<key>history</key>
			<integer>10</integer>
			<key>dispatch</key>
			<string>Wifi</string>
			<key>implementation</key>
			<string>apHotspotter:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1020</integer>
			<key>desc</key>
			<string>PURPOSE: Identify if connected AP is unencrypted, HOW: If unencrypted use AP MAC, else 0 (baseline), to generate candidate assertion, BASELINE: created from zero</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>4</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>unencryptedWifi</string>
			<key>penalty</key>
			<integer>30</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>1</integer>
			<key>dispatch</key>
			<string>Wifi</string>
			<key>implementation</key>
			<string>wifiEncType:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1021</integer>
			<key>desc</key>
			<string>PURPOSE: Identify if a high risk App is running, HOW: Scan current processes for payload names, if found use process name, else 0 (baseline), to generate candidate assertion for TrustFactor, BASELINE: created from zero</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>5</integer>
			<key>priority</key>
			<integer>2</integer>
			<key>name</key>
			<string>highriskApp</string>
			<key>penalty</key>
			<integer>30</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Process</string>
			<key>implementation</key>
			<string>highRiskApp:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>scany</string>
				<string>systemMonitor</string>
				<string>BLE Scanner</string>
				<string>CoreMonitor</string>
				<string>AppSwitch</string>
				<string>Lirum Info</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1022</integer>
			<key>desc</key>
			<string>PURPOSE: Identify vulnerable platform in use, HOW: The current platform version is compared to payload versions, if match, current platform version is used, else 0 (baseline),to generate a single candidate assertion for the TrustFactor, BASELINE: created from zero</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>6</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>platformVulnerable</string>
			<key>penalty</key>
			<integer>40</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Platform</string>
			<key>implementation</key>
			<string>vulnerablePlatform:</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>8.1.2</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1023</integer>
			<key>desc</key>
			<string>PURPOSE: Identify if a device backup is enabled (via process in this instance), HOW: Determine if iCloud backup enabled, if yes, use name, else 0 (baseline),to generate a single candidate assertion for the TrustFactor, BASELINE: created from zero</string>
			<key>classID</key>
			<integer>3</integer>
			<key>subClassID</key>
			<integer>6</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>backupEnabled</string>
			<key>penalty</key>
			<integer>30</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>1</integer>
			<key>learnTime</key>
			<integer>0</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>DEVICE</string>
			<key>implementation</key>
			<string>PLATFORM</string>
			<key>baseline</key>
			<integer>0</integer>
			<key>payload</key>
			<array>
				<string>backupd</string>
				<string>profiled</string>
				<string>awdd</string>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1024</integer>
			<key>desc</key>
			<string>PURPOSE: Profile the device movement during analysis, HOW: Leverage payload &quot;rounding&quot; to round current X/Y/Z Gyro data and concat to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings</string>
			<key>classID</key>
			<integer>4</integer>
			<key>subClassID</key>
			<integer>1</integer>
			<key>priority</key>
			<integer>3</integer>
			<key>name</key>
			<string>deviceMovement</string>
			<key>penalty</key>
			<integer>40</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>3</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>3</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>5</integer>
			<key>dispatch</key>
			<string>Sensor</string>
			<key>implementation</key>
			<string>deviceMovement:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array>
				<dict>
					<key>rounding</key>
					<integer>100</integer>
				</dict>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1025</integer>
			<key>desc</key>
			<string>PURPOSE: Profile the device position during analysis (how it is held), HOW: Leverage payload &quot;rounding&quot; to round current X/Y/Z accelerometer data and concat to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings</string>
			<key>classID</key>
			<integer>4</integer>
			<key>subClassID</key>
			<integer>1</integer>
			<key>priority</key>
			<integer>3</integer>
			<key>name</key>
			<string>devicePosition</string>
			<key>penalty</key>
			<integer>40</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>3</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>3</integer>
			<key>learnRunCount</key>
			<integer>0</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>5</integer>
			<key>dispatch</key>
			<string>Sensor</string>
			<key>implementation</key>
			<string>devicePosition:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array>
				<dict>
					<key>rounding</key>
					<integer>100</integer>
				</dict>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1026</integer>
			<key>desc</key>
			<string>PURPOSE: Profile access location, HOW: The current location (long/lat) is rounded based on pyaload, concatenated and used to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings</string>
			<key>classID</key>
			<integer>4</integer>
			<key>subClassID</key>
			<integer>2</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>KnownTime</string>
			<key>penalty</key>
			<integer>70</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>2</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>20</integer>
			<key>local</key>
			<integer>1</integer>
			<key>history</key>
			<integer>20</integer>
			<key>dispatch</key>
			<string>Location</string>
			<key>implementation</key>
			<string>locationAllowed:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array>
				<dict>
					<key>rounding</key>
					<integer>100</integer>
				</dict>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1027</integer>
			<key>desc</key>
			<string>PURPOSE: Profile access time, HOW: Leverage payload &quot;blocksize&quot; to divide day into chunks, use block number of current time to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings</string>
			<key>classID</key>
			<integer>4</integer>
			<key>subClassID</key>
			<integer>3</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>knownTime</string>
			<key>penalty</key>
			<integer>70</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>2</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>20</integer>
			<key>local</key>
			<integer>1</integer>
			<key>history</key>
			<integer>3</integer>
			<key>dispatch</key>
			<string>Time</string>
			<key>implementation</key>
			<string>timeAllowed:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array>
				<dict>
					<key>blocksize</key>
					<string>6</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>id</key>
			<integer>1028</integer>
			<key>desc</key>
			<string>PURPOSE: Identify known bluetooth device, HOW: Use current paired bluetooth device ID to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings</string>
			<key>classID</key>
			<integer>4</integer>
			<key>subClassID</key>
			<integer>4</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>bluetoothPaired</string>
			<key>penalty</key>
			<integer>-100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>2</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>20</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>5</integer>
			<key>dispatch</key>
			<string>Bluetooth</string>
			<key>implementation</key>
			<string>bluetoothPaired:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1029</integer>
			<key>desc</key>
			<string>PURPOSE: Identify known bluetooth BLE devices in close proximity, HOW: Iterate through top 3 found BLE device IDs and generate multiple candidate assertions for the TrustFactor, BASELINE: Learned from readings</string>
			<key>classID</key>
			<integer>4</integer>
			<key>subClassID</key>
			<integer>4</integer>
			<key>priority</key>
			<integer>1</integer>
			<key>name</key>
			<string>bluetoothLEScan</string>
			<key>penalty</key>
			<integer>-100</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>2</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>20</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>30</integer>
			<key>dispatch</key>
			<string>Bluetooth</string>
			<key>implementation</key>
			<string>bluetoothLEScan:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array/>
		</dict>
		<dict>
			<key>id</key>
			<integer>1027</integer>
			<key>desc</key>
			<string>PURPOSE: Profile device power level, HOW: Leverage payload &quot;blocksize&quot; to divide power level into chunks, use block number of current power level to generate a single candidate assertion for the TrustFactor,BASELINE: Learned from readings</string>
			<key>classID</key>
			<integer>4</integer>
			<key>subClassID</key>
			<integer>5</integer>
			<key>priority</key>
			<integer>3</integer>
			<key>name</key>
			<string>powerLevel</string>
			<key>penalty</key>
			<integer>30</integer>
			<key>dnePenalty</key>
			<real>0.25</real>
			<key>learnMode</key>
			<integer>2</integer>
			<key>learnTime</key>
			<integer>7</integer>
			<key>learnAssertionCount</key>
			<integer>0</integer>
			<key>learnRunCount</key>
			<integer>20</integer>
			<key>local</key>
			<integer>0</integer>
			<key>history</key>
			<integer>2</integer>
			<key>dispatch</key>
			<string>Platform</string>
			<key>implementation</key>
			<string>powerPercent:</string>
			<key>baseline</key>
			<string>learned</string>
			<key>payload</key>
			<array>
				<dict>
					<key>blocksize</key>
					<integer>4</integer>
				</dict>
			</array>
		</dict>
	</array>
</dict>
</plist>
