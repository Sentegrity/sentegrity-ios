{
  "policyID": 2,
  "revision": 1,
  "runtime": 5,
  "userThreshold": 60,
  "systemThreshold": 65,
  "DNEModifiers": {
      "unauthorized": 1,
      "unsupported": 0.7,
      "disabled": 1,
      "expired": 0.5,
      "error": 0.5
  },
  "classifications": [{
    "id": 1,
    "name": "BREACH_INDICATOR",
    "weight": 0,
    "protectMode": 1,
    "protectViolationName": "Breach",
    "protectInfo": "A system breach has been detected, please contact Sentegrity for assistance.",
    "contactPhone": 18005556666,
    "contactURL": "wwww.Sentegrity.com/help",
    "contactEmail": "help@Sentegrity.com"
  }, {
    "id": 2,
    "name": "POLICY_VIOLATION",
    "weight": 0,
    "protectMode": 0,
    "protectViolationName": "Policy",
    "protectInfo": "A violation of application policy has been detected. Please contact the application administrator.",
    "contactPhone": 18005556666,
    "contactURL": "www.application.com",
    "contactEmail": "help@application.com"
  }, {
    "id": 3,
    "name": "SYSTEM_SECURITY",
    "weight": 0,
    "protectMode": 2,
    "protectViolationName": "Anomaly",
    "protectInfo": "A system anomaly has been detected, please contact Sentegrity for assistance.",
    "contactPhone": 18005556666,
    "contactURL": "wwww.Sentegrity.com/help",
    "contactEmail": "help@Sentegrity.com"
  }, {
    "id": 4,
    "name": "USER_ANOMALY",
    "weight": 1,
    "protectMode": 3,
    "protectViolationName": "Anomaly",
    "protectInfo": "Are you the ower of this device? Please authenticate to confirm.",
    "contactPhone": 18005556666,
    "contactURL": "www.application.com",
    "contactEmail": "help@application.com"
  }],
  "subclassification": [{
    "id": 1,
    "classID": 1,
    "name": "ThreatSpecific",
    "dneMessage": "",
    "weight": 3
  }, {
    "id": 2,
    "classID": 1,
    "name": "Tamper",
    "dneMessage": "",
    "weight": 3
  }, {
    "id": 3,
    "classID": 1,
    "name": "Sandbox",
    "dneMessage": "",
    "weight": 3
  }, {
    "id": 1,
    "classID": 2,
    "name": "File",
    "dneMessage": "",
    "weight": 2
  }, {
    "id": 2,
    "classID": 2,
    "name": "Process",
    "dneMessage": "",
    "weight": 1
  }, {
    "id": 3,
    "classID": 2,
    "name": "Network",
    "dneMessage": "",
    "weight": 2
  }, {
    "id": 4,
    "classID": 2,
    "name": "Wifi",
    "dneMessage": "",
    "weight": 2
  }, {
    "id": 5,
    "classID": 2,
    "name": "InstalledApps",
    "dneMessage": "",
    "weight": 2
  }, {
    "id": 6,
    "classID": 2,
    "name": "Versioning",
    "dneMessage": "",
    "weight": 2
  }, {
    "id": 7,
    "classID": 2,
    "name": "ProtectMode",
    "dneMessage": "",
    "weight": 3
  }, {
    "id": 1,
    "classID": 3,
    "name": "Time",
    "dneMessage": "",
    "weight": 3
  }, {
    "id": 2,
    "classID": 3,
    "name": "Location",
    "dneMessage": "Sentegrity was unable to verify policy, allowing location services may prevent this situation from reoccuring. [View Privacy Information]",
    "weight": 3
  }, {
    "id": 3,
    "classID": 3,
    "name": "Wifi",
    "dneMessage": "Sentegrity was unable to verify policy, connecting to Wifi may prevent this from reoccuring.  [View Privacy Information]",
    "weight": 3
  }, {
    "id": 4,
    "classID": 3,
    "name": "Platform",
    "dneMessage": "",
    "weight": 3
  }, {
    "id": 1,
    "classID": 4,
    "name": "Positiion",
    "dneMessage": "",
    "weight": 0
  }, {
    "id": 2,
    "classID": 4,
    "name": "Location",
    "dneMessage": "Sentegrity was unable to authenticate you, allowing location services may prevent this situation from reoccuring. [View Privacy Information]",
    "weight": 3
  }, {
    "id": 3,
    "classID": 4,
    "name": "Time",
    "dneMessage": "",
    "weight": 2
  }, {
    "id": 4,
    "classID": 4,
    "name": "KnownDevices",
    "dneMessage": "Sentegrity was unable to authenticate you, allowing bluetooth access and connecting to Wifi may prevent this from reoccuring.  [View Privacy Information]",
    "weight": 3
  }, {
    "id": 5,
    "classID": 4,
    "name": "Power",
    "dneMessage": "",
    "weight": 1
  }, {
    "id": 6,
    "classID": 4,
    "name": "Activity",
    "dneMessage": "",
    "weight": 2
  }, {
    "id": 7,
    "classID": 4,
    "name": "ProtectMode",
    "dneMessage": "",
    "weight": 3
  }],
  "trustFactors": [{
      "id": 1001,
      "desc": "PURPOSE: Identify known bad files, HOW: Scan for payload file names, if found use first found filename else 0 (baseline) to generate single canidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0",
      "revision": 1,
      "classID": 1,
      "subClassID": 1,
      "priority": 1,
      "name": "badFiles",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "File",
      "implementation": "badFiles:",
      "baseline": "0",
      "payload": [
        "/bin/bash",
        "/bin/sh",
        "/Library/MobileSubstrate/MobileSubstrate.dylib",
        "/var/log/syslog",
        "/etc/clutch.conf",
        "/var/root/Documents/Cracked/",
        "/private/var/lib/cydia/",
        "/private/var/lib/apt",
        "/private/var/lib/stash"
      ]
    }, {
      "id": 1002,
      "desc": "PURPOSE: Identify known bad process names, HOW: Scan for payload process names if found use first found process name else 0 (baseline) to generate single candidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0",
      "revision": 1,
      "classID": 1,
      "subClassID": 1,
      "priority": 1,
      "name": "badProcs",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "Process",
      "implementation": "badProcesses:",
      "baseline": "0",
      "payload": [
        "clang",
        "python*",
        "absinthed*",
        "Snoop-it*",
        "MobileCydia"
      ]
    },

    {
      "id": 1003,
      "desc": "PURPOSE: Identify active network destinations using known bad IPs, HOW: Scan for network destinations in payload if found use first found network destination else 0 (baseline) to generate single candidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0",
      "revision": 1,
      "classID": 1,
      "subClassID": 1,
      "priority": 3,
      "name": "badNetDst",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "Netstat",
      "implementation": "badNetDst:",
      "baseline": "0",
      "payload": [
        "appaddict.org",
        "hackndev.org",
        "thebigboss.org",
        "howett.net",
        "nesolabs.de"
      ]
    }, {
      "id": 1004,
      "desc": "PURPOSE: Identify known bad service/port in use, HOW: Scan for listening ports in payload if found use found port number else 0 (baseline) to generate single candidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0",
      "revision": 1,
      "classID":1,
      "subClassID": 3,
      "priority": 2,
      "name": "privledgedNetServices",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "Netstat",
      "implementation": "priviledgedNetServices",
      "baseline": "0",
      "payload": [
        22,
        80,
        443
      ]
    }, {
      "id": 1005,
      "desc": "PURPOSE: identify bad uri handlers of known malicious apps, HOW: Attempt to access bad URIs from payload if found use found URI name else 0 (baseline) to generate single candidate assertion for TrustFactor, BASELINE: Created using assertion generated from 0",
      "revision": 1,
      "classID": 1,
      "subClassID": 1,
      "priority": 1,
      "name": "badURIHandler",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "Http",
      "implementation": "badURIHandlers:",
      "baseline": "0",
      "payload": [
        "cydia",
        "snoop"
      ]
    }, {
      "id": 1006,
      "desc": "PURPOSE: Identify integrity of the sandbox via API calls, HOW: Perform platform-specific tests, use result from a single or multiple API call functions to generate a single or multiple candidate assertions for TrustFactor, BASELINE: Created using assertion generated from known-good (expected) result of API calls",
      "revision": 1,
      "classID": 1,
      "subClassID": 3,
      "priority": 2,
      "name": "sandboxVerification",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "Sandbox",
      "implementation": "sandboxVerification:",
      "baseline": "learned",
      "payload": []
    }, {
      "id": 1007,
      "desc": "PURPOSE: Detect a tamper of a subscriber's app based on binary data hash performed by subscriber SDK, HOW: Extract hash from subscriber IPC request and generate a single assertion from it for the TrustFactor, BASELINE: Learned using first subscriber hash to generate assertion",
      "revision": 1,
      "classID": 1,
      "subClassID": 2,
      "priority": 1,
      "name": "subscriberTamper",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 1,
      "history": 1,
      "dispatch": "Subscriber",
      "implementation": "subscribeTamper:",
      "baseline": "learned",
      "payload": []
    }, {
      "id": 1008,
      "desc": "PURPOSE: Detect tamper of sentegrity binary or core detection policy, HOW: This rule is forcibly triggered as a result of embedded detection or policy or runtime checksum violations and triggered using a random number else 0 to generate a single assertion for the TrustFactor that is guaranteed to be unique, BASELINE: created using assertion generated from 0",
      "revision": 1,
      "classID": 1,
      "subClassID": 2,
      "priority": 1,
      "name": "sentegrityTamper",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 1,
      "dispatch": "Sentegrity",
      "implementation": "selfTamper:",
      "baseline": "0",
      "payload": []
    }, {
      "id": 1009,
      "desc": "PURPOSE: Policy that only allows access from specific locations, HOW: The current location (long/lat) is rounded and concatenated to generate a single candidate assertion for the TrustFactor, BASELINE: Created from pre-established payload values set by policy owner",
      "revision": 1,
      "classID": 2,
      "subClassID": 2,
      "priority": 1,
      "name": "locationAllowed",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 1,
      "history": 5,
      "dispatch": "Location",
      "implementation": "locationAllowed:",
      "baseline": "payload",
      "payload": [
        "41,-88",
        "41,-87"
      ]
    }, {
      "id": 1010,
      "desc": "PURPOSE: Policy that only allows access during specific times, HOW: The current time is compared to allowed payload times spans, if not in the time span (violation) use current time else 0 (baseline) to generate a single candidate assertion for the TrustFactor, BASELINE: Created from 0",
      "revision": 1,
      "classID": 2,
      "subClassID": 1,
      "priority": 1,
      "name": "timeAllowed",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 1,
      "history": 5,
      "dispatch": "Time",
      "implementation": "timeAllowed:",
      "baseline": "0",
      "payload": [
        "8-17"
      ]
    }, {
      "id": 1011,
      "desc": "PURPOSE: Policy that does not allow vulnerable platforms, HOW: The current platform version is compared to payload known-good versions, if match not found use current version, else 0 (baseline) to generate a single candidate assertion for the TrustFactor  , BASELINE: Created from 0",
      "revision": 1,
      "classID": 2,
      "subClassID": 4,
      "priority": 1,
      "name": "platformAllowed",
      "penalty": 100,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 1,
      "history": 5,
      "dispatch": "Platform",
      "implementation": "platformVersionAllowed:",
      "baseline": "0",
      "payload": [
        "8.1.2"
      ]
    }, {
      "id": 1012,
      "desc": "PURPOSE: Identify change in critical file sizes, HOW: Iterate through payload files and determine sizes for each, summarize all to generate candidate assertion for the TrustFactor, BASELINE: Learned from first candidate assertion",
      "revision": 1,
      "classID": 3,
      "subClassID": 1,
      "priority": 1,
      "name": "fileSizeChange",
      "penalty": 30,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "File",
      "implementation": "fileSizeChange:",
      "baseline": "learned",
      "iterates": 1,
      "payload": [
        "/etc/passwd",
        "/bin/usr"
      ]
    }, {
      "id": 1013,
      "desc": "PURPOSE: Identify new root (uid=0) processes, HOW: Iterate through all current root processes and generate candidate assertion for each root process name resulting in multiple candidate assertions for the TrustFactor, BASELINE: Multiple created from each root process name discovered",
      "revision": 1,
      "classID": 3,
      "subClassID": 2,
      "priority": 2,
      "name": "newRootProcess",
      "penalty": 70,
      "dnePenalty": 0.25,
      "learnMode": 2,
      "learnTime": 7,
      "learnAssertionCount": 0,
      "learnRunCount": 10,
      "local": 0,
      "history": 30,
      "dispatch": "Process",
      "implementation": "newRootProcess:",
      "baseline": "learned",
      "payload": []
    }, {
      "id": 1014,
      "desc": "PURPOSE: Identify new privileged network services, HOW: Iterate through all low port (0-1023) source port network connection, generate assertion for each port resulting in multiple candidate assertions for the TrustFactor, BASELINE: Multiple created from each low port",
      "revision": 1,
      "classID": 3,
      "subClassID": 3,
      "priority": 2,
      "name": "newNetService",
      "penalty": 80,
      "dnePenalty": 0.25,
      "learnMode": 2,
      "learnTime": 7,
      "learnAssertionCount": 0,
      "learnRunCount": 10,
      "local": 0,
      "history": 10,
      "dispatch": "Netstat",
      "implementation": "newNetServices:",
      "baseline": "learned",
      "payload": []
    }, {
      "id": 1015,
      "desc": "PURPOSE: Identify if no interface is up (no route), HOW: Check if loopback adapter is the default gw if yes use interface  name, else 0 (baseline),to generate candidate assertion for TrustFactor, BASELINE: Created from 0",
      "revision": 1,
      "classID": 3,
      "subClassID": 3,
      "priority": 3,
      "name": "noRoute",
      "penalty": 30,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "Route",
      "implementation": "noRoute:",
      "baseline": "0",
      "payload": []
    }, {
      "id": 1016,
      "desc": "PURPOSE: Identify if VPN interface is up, HOW: Check if VPN interface adapter is the default gw, if yes use interface  name, else 0 (baseline),to generate candidate assertion for TrustFactor, BASELINE: Created from 0",
      "revision": 1,
      "classID": 3,
      "subClassID": 3,
      "priority": 3,
      "name": "vpnUp",
      "penalty": 30,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "Route",
      "implementation": "vpnUp:",
      "baseline": "0",
      "payload": []
    }, {
      "id": 1017,
      "desc": "PURPOSE: Identify if connected AP is a SOHO, HOW: If current AP MAC (BSSID) matches any payload OUIs use current OUI, else 0 (baseline),to generate candidate assertion for TrustFactor, BASELINE: Created from 0",
      "revision": 1,
      "classID": 3,
      "subClassID": 4,
      "priority": 1,
      "name": "apSOHO",
      "penalty": 30,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 5,
      "dispatch": "Wifi",
      "implementation": "apSoho:",
      "baseline": "0",
      "payload": [
        "00:0C:41",
        "00:0F:66",
        "00:12:17",
        "00:13:10",
        "00:14:BF",
        "00:16:B6",
        "00:18:39",
        "00:18:F8",
        "00:1A:70",
        "00:1C:10",
        "00:1D:7E",
        "00:1E:E5",
        "00:21:29",
        "00:22:6B",
        "00:23:69",
        "00:25:9C",
        "20:AA:4B",
        "48:F8:B3",
        "58:6D:8F",
        "68:7F:74",
        "98:FC:11",
        "C0:C1:C0",
        "C8:B3:73",
        "00:09:5B",
        "00:0F:B5",
        "00:14:6C",
        "00:18:4D",
        "00:1B:2F",
        "00:1E:2A",
        "00:1F:33",
        "00:22:3F",
        "00:24:B2",
        "00:26:F2",
        "00:8E:F2",
        "04:A1:51",
        "08:BD:43",
        "10:0D:7F",
        "20:0C:C8",
        "20:4E:7F",
        "20:E5:2A",
        "28:C6:8E",
        "2C:B0:5D",
        "30:46:9A",
        "44:94:FC",
        "4C:60:DE",
        "50:4A:6E",
        "6C:B0:CE",
        "74:44:01",
        "80:37:73",
        "84:1B:5E",
        "9C:D3:6D",
        "A0:21:B7",
        "A0:63:91",
        "A4:2B:8C",
        "C0:3F:0E",
        "C0:FF:D4",
        "C4:04:15",
        "C4:3D:C7",
        "E0:46:9A",
        "E0:91:F5",
        "E4:F4:C6",
        "E8:FC:AF",
        "F8:73:94"
      ]
    }, {
      "id": 1018,
      "desc": "PURPOSE: Identify if connected AP is known, HOW: Use current AP MAC (BSSID) to generate candidate assertion for TrustFactor, BASELINE: Created from learned AP MAC (BSSIDs)",
      "revision": 1,
      "classID": 3,
      "subClassID": 4,
      "priority": 2,
      "name": "apKnown",
      "penalty": 30,
      "dnePenalty": 0.25,
      "learnMode": 2,
      "learnTime": 7,
      "learnAssertionCount": 0,
      "learnRunCount": 10,
      "local": 1,
      "history": 10,
      "dispatch": "Wifi",
      "implementation": "apHotspotter:",
      "baseline": "learned",
      "payload": []
    }, {
      "id": 1020,
      "desc": "PURPOSE: Identify if connected AP is unencrypted, HOW: If unencrypted use AP MAC, else 0 (baseline), to generate candidate assertion, BASELINE: created from zero",
      "revision": 1,
      "classID": 3,
      "subClassID": 4,
      "priority": 1,
      "name": "unencryptedWifi",
      "penalty": 30,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 1,
      "dispatch": "Wifi",
      "implementation": "wifiEncType:",
      "baseline": "0",

      "payload": []
    }, {
      "id": 1021,
      "desc": "PURPOSE: Identify if a high risk App is running, HOW: Scan current processes for payload names, if found use process name, else 0 (baseline), to generate candidate assertion for TrustFactor, BASELINE: created from zero",
      "revision": 1,
      "classID": 3,
      "subClassID": 5,
      "priority": 2,
      "name": "highRiskApp",
      "penalty": 30,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "Process",
      "implementation": "highRiskApp:",
      "baseline": "0",
      "payload": [
        "scany",
        "systemMonitor",
        "BLE Scanner",
        "Core Monitor",
        "AppSwitch",
        "Lirum Info"
      ]
    }, {
      "id": 1022,
      "desc": "PURPOSE: Identify vulnerable platform in use, HOW: The current platform version is compared to payload versions, if match, current platform version is used, else 0 (baseline),to generate a single candidate assertion for the TrustFactor, BASELINE: created from zero",
      "revision": 1,
      "classID": 3,
      "subClassID": 6,
      "priority": 1,
      "name": "platformVulnerable",
      "penalty": 40,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "Platform",
      "implementation": "vulnerablePlatform:",
      "baseline": "0",
      "payload": [
        "8.1.2"
      ]
    }, {
      "id": 1023,
      "desc": "PURPOSE: Identify if a device backup is enabled (via process in this instance), HOW: Determine if iCloud backup enabled, if yes, use name, else 0 (baseline),to generate a single candidate assertion for the TrustFactor, BASELINE: created from zero",
      "revision": 1,
      "classID": 3,
      "subClassID": 6,
      "priority": 1,
      "name": "backupEnabled",
      "penalty": 30,
      "dnePenalty": 0.25,
      "learnMode": 1,
      "learnTime": 0,
      "learnAssertionCount": 0,
      "learnRunCount": 0,
      "local": 0,
      "history": 3,
      "dispatch": "DEVICE",
      "implementation": "PLATFORM",
      "baseline": "0",
      "payload": [
        "backupd",
        "profiled",
        "awdd"
      ]
    }, {
      "id": 1024,
      "desc": "PURPOSE: Profile the device movement during analysis, HOW: Leverage payload \"rounding\" to round current X/Y/Z Gyro data and concat to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings",
      "revision": 1,
      "classID": 4,
      "subClassID": 1,
      "priority": 3,
      "name": "deviceMovement",
      "penalty": 40,
      "dnePenalty": 0.25,
      "learnMode": 3,
      "learnTime": 7,
      "learnAssertionCount": 3,
      "learnRunCount": 0,
      "local": 0,
      "history": 5,
      "dispatch": "Sensor",
      "implementation": "deviceMovement:",
      "baseline": "learned",
      "payload": [{
        "rounding": 100
      }]
    }, {
      "id": 1025,
      "desc": "PURPOSE: Profile the device position during analysis (how it is held), HOW: Leverage payload \"rounding\" to round current X/Y/Z accelerometer data and concat to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings",
      "revision": 1,
      "classID": 4,
      "subClassID": 1,
      "priority": 3,
      "name": "devicePosition",
      "penalty": 40,
      "dnePenalty": 0.25,
      "learnMode": 3,
      "learnTime": 7,
      "learnAssertionCount": 3,
      "learnRunCount": 0,
      "local": 0,
      "history": 5,
      "dispatch": "Sensor",
      "implementation": "devicePosition:",
      "baseline": "learned",
      "payload": [{
        "rounding": 100
      }]
    }, {
      "id": 1026,
      "desc": "PURPOSE: Profile access location, HOW: The current location (long/lat) is rounded based on pyaload, concatenated and used to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings",
      "revision": 1,
      "classID": 4,
      "subClassID": 2,
      "priority": 1,
      "name": "knownTime",
      "penalty": 70,
      "dnePenalty": 0.25,
      "learnMode": 2,
      "learnTime": 7,
      "learnAssertionCount": 0,
      "learnRunCount": 20,
      "local": 1,
      "history": 20,
      "dispatch": "Location",
      "implementation": "locationAllowed:",
      "baseline": "learned",
      "payload": [{
        "rounding": 100
      }]
    }, {
      "id": 1027,
      "desc": "PURPOSE: Profile access time, HOW: Leverage payload \"blocksize\" to divide day into chunks, use block number of current time to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings",
      "revision": 1,
      "classID": 4,
      "subClassID": 3,
      "priority": 1,
      "name": "knownTime",
      "penalty": 70,
      "dnePenalty": 0.25,
      "learnMode": 2,
      "learnTime": 7,
      "learnAssertionCount": 0,
      "learnRunCount": 20,
      "local": 1,
      "history": 3,
      "dispatch": "Time",
      "implementation": "timeAllowed:",
      "baseline": "learned",
      "payload": [{
        "blocksize": 6
      }]
    }, {
      "id": 1028,
      "desc": "PURPOSE: Identify known bluetooth device, HOW: Use current paired bluetooth device ID to generate a single candidate assertion for the TrustFactor, BASELINE: Learned from readings",
      "revision": 1,
      "classID": 4,
      "subClassID": 4,
      "priority": 1,
      "name": "bluetoothPaired",
      "penalty": -100,
      "dnePenalty": 0.25,
      "learnMode": 2,
      "learnTime": 7,
      "learnAssertionCount": 0,
      "learnRunCount": 20,
      "local": 0,
      "history": 5,
      "dispatch": "Bluetooth",
      "implementation": "bluetoothPaired:",
      "baseline": "learned",
      "payload": []
    }, {
      "id": 1029,
      "desc": "PURPOSE: Identify known bluetooth BLE devices in close proximity, HOW: Iterate through top 3 found BLE device IDs and generate multiple candidate assertions for the TrustFactor, BASELINE: Learned from readings",
      "revision": 1,
      "classID": 4,
      "subClassID": 4,
      "priority": 1,
      "name": "bluetoothLEScan",
      "penalty": -100,
      "dnePenalty": 0.25,
      "learnMode": 2,
      "learnTime": 7,
      "learnAssertionCount": 0,
      "learnRunCount": 20,
      "local": 0,
      "history": 30,
      "dispatch": "Bluetooth",
      "implementation": "bluetoothLEScan:",
      "baseline": "learned",
      "payload": []
    }, {
      "id": 1027,
      "desc": "PURPOSE: Profile device power level, HOW: Leverage payload \"blocksize\" to divide power level into chunks, use block number of current power level to generate a single candidate assertion for the TrustFactor,BASELINE: Learned from readings",
      "revision": 1,
      "classID": 4,
      "subClassID": 5,
      "priority": 3,
      "name": "powerLevel",
      "penalty": 30,
      "dnePenalty": 0.25,
      "learnMode": 2,
      "learnTime": 7,
      "learnAssertionCount": 0,
      "learnRunCount": 20,
      "local": 0,
      "history": 2,
      "dispatch": "Platform",
      "implementation": "powerPercent:",
      "baseline": "learned",
      "payload": [{
        "blocksize": 4
      }]
    }
  ]
}
